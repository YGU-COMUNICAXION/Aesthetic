---
import { getImage } from "astro:assets";

interface Props {
  title: string;
  subtitle: string;
  images?: any[];
  videoId?: string;
}

const { title, subtitle, images = [], videoId } = Astro.props;

// Optimiza las imágenes para asegurar que tengan el src correcto
const optimizedImages = [];
for (let i = 0; i < images.length; i++) {
  const optimizedImage = await getImage({
    src: images[i],
    format: "webp",
  });
  optimizedImages.push(optimizedImage);
}
---

<figure class="overflow-hidden">
  {
    videoId ? (
      <div class="aspect-video w-full rounded-3xl overflow-hidden mb-4">
        <iframe
          src={`https://www.youtube.com/embed/${videoId}`}
          title={title}
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen
          class="w-full h-full"
        />
      </div>
    ) : optimizedImages.length === 1 ? (
      <img
        src={optimizedImages[0].src}
        alt={`${title} — ${subtitle} — Imagen 1`}
        class="w-full aspect-square object-cover rounded-3xl mb-4 transition-all duration-700"
      />
    ) : (
      optimizedImages.length > 1 && (
        <gallery-fade
          data-images={JSON.stringify(optimizedImages)}
          class="flex flex-col gap-4 w-full aspect-square object-cover rounded-3xl mb-4"
        />
      )
    )
  }
  <figcaption class="text-center">
    <p class="font-light text-lg lg:text-xl">
      {title}
      <span class="mx-1">-</span>
      {subtitle}
    </p>
  </figcaption>
</figure>

<style>
  gallery-fade {
    display: block;
    width: 100%;
    aspect-ratio: 1/1;
    border-radius: 1.5rem;
    overflow: hidden;
    position: relative;
    background-size: cover;
    background-position: center;
    transition: background-image 1s ease-in-out;
    margin-bottom: 1rem;
  }
</style>

<script>
  class GalleryFade extends HTMLElement {
    [x: string]: any;
    connectedCallback() {
      this.imgs = JSON.parse(this.getAttribute("data-images") || "[]");
      this.idx = 0;
      if (!this.imgs.length) return;
      this.style.backgroundImage = `url(${this.imgs[0].src})`;
      if (this.imgs.length > 1) {
        this.interval = setInterval(() => {
          this.idx = (this.idx + 1) % this.imgs.length;
          this.style.backgroundImage = `url(${this.imgs[this.idx].src})`;
        }, 3500);
      }
    }
    disconnectedCallback() {
      clearInterval(this.interval);
    }
  }
  if (!customElements.get("gallery-fade")) {
    customElements.define("gallery-fade", GalleryFade);
  }
</script>
